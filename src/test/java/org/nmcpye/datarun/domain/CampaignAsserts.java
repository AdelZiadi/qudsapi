package org.nmcpye.datarun.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CampaignAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCampaignAllPropertiesEquals(Campaign expected, Campaign actual) {
        assertCampaignAutoGeneratedPropertiesEquals(expected, actual);
        assertCampaignAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCampaignAllUpdatablePropertiesEquals(Campaign expected, Campaign actual) {
        assertCampaignUpdatableFieldsEquals(expected, actual);
        assertCampaignUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCampaignAutoGeneratedPropertiesEquals(Campaign expected, Campaign actual) {
        assertThat(expected)
            .as("Verify Campaign auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCampaignUpdatableFieldsEquals(Campaign expected, Campaign actual) {
        assertThat(expected)
            .as("Verify Campaign relevant properties")
            .satisfies(e -> assertThat(e.getCampaignCode()).as("check campaignCode").isEqualTo(actual.getCampaignCode()))
            .satisfies(
                e -> assertThat(e.getCampaignStartedDate()).as("check campaignStartedDate").isEqualTo(actual.getCampaignStartedDate())
            )
            .satisfies(e -> assertThat(e.getCampaignDays()).as("check campaignDays").isEqualTo(actual.getCampaignDays()))
            .satisfies(e -> assertThat(e.getCampaignYear()).as("check campaignYear").isEqualTo(actual.getCampaignYear()))
            .satisfies(e -> assertThat(e.getCampaignNote()).as("check campaignNote").isEqualTo(actual.getCampaignNote()))
            .satisfies(e -> assertThat(e.getEnabled()).as("check enabled").isEqualTo(actual.getEnabled()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCampaignUpdatableRelationshipsEquals(Campaign expected, Campaign actual) {
        assertThat(expected)
            .as("Verify Campaign relationships")
            .satisfies(e -> assertThat(e.getCampaignType()).as("check campaignType").isEqualTo(actual.getCampaignType()));
    }
}

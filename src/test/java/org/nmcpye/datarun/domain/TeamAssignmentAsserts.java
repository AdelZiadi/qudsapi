package org.nmcpye.datarun.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TeamAssignmentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamAssignmentAllPropertiesEquals(TeamAssignment expected, TeamAssignment actual) {
        assertTeamAssignmentAutoGeneratedPropertiesEquals(expected, actual);
        assertTeamAssignmentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamAssignmentAllUpdatablePropertiesEquals(TeamAssignment expected, TeamAssignment actual) {
        assertTeamAssignmentUpdatableFieldsEquals(expected, actual);
        assertTeamAssignmentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamAssignmentAutoGeneratedPropertiesEquals(TeamAssignment expected, TeamAssignment actual) {
        assertThat(expected)
            .as("Verify TeamAssignment auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamAssignmentUpdatableFieldsEquals(TeamAssignment expected, TeamAssignment actual) {
        assertThat(expected)
            .as("Verify TeamAssignment relevant properties")
            .satisfies(e -> assertThat(e.getPhaseNo()).as("check phaseNo").isEqualTo(actual.getPhaseNo()))
            .satisfies(e -> assertThat(e.getFieldCode()).as("check fieldCode").isEqualTo(actual.getFieldCode()))
            .satisfies(e -> assertThat(e.getDistrictCode()).as("check districtCode").isEqualTo(actual.getDistrictCode()))
            .satisfies(e -> assertThat(e.getGov()).as("check gov").isEqualTo(actual.getGov()))
            .satisfies(e -> assertThat(e.getDistrict()).as("check district").isEqualTo(actual.getDistrict()))
            .satisfies(e -> assertThat(e.getSubdistrict()).as("check subdistrict").isEqualTo(actual.getSubdistrict()))
            .satisfies(e -> assertThat(e.getVillage()).as("check village").isEqualTo(actual.getVillage()))
            .satisfies(e -> assertThat(e.getSubvillage()).as("check subvillage").isEqualTo(actual.getSubvillage()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDayId()).as("check dayId").isEqualTo(actual.getDayId()))
            .satisfies(e -> assertThat(e.getPopulation()).as("check population").isEqualTo(actual.getPopulation()))
            .satisfies(e -> assertThat(e.getItnsPlanned()).as("check itnsPlanned").isEqualTo(actual.getItnsPlanned()))
            .satisfies(e -> assertThat(e.getTargetType()).as("check targetType").isEqualTo(actual.getTargetType()))
            .satisfies(e -> assertThat(e.getLongitude()).as("check longitude").isEqualTo(actual.getLongitude()))
            .satisfies(e -> assertThat(e.getLatitude()).as("check latitude").isEqualTo(actual.getLatitude()))
            .satisfies(e -> assertThat(e.getStartDayDate()).as("check startDayDate").isEqualTo(actual.getStartDayDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamAssignmentUpdatableRelationshipsEquals(TeamAssignment expected, TeamAssignment actual) {
        assertThat(expected)
            .as("Verify TeamAssignment relationships")
            .satisfies(e -> assertThat(e.getCampaign()).as("check campaign").isEqualTo(actual.getCampaign()))
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()))
            .satisfies(e -> assertThat(e.getTeam()).as("check team").isEqualTo(actual.getTeam()))
            .satisfies(e -> assertThat(e.getWarehouse()).as("check warehouse").isEqualTo(actual.getWarehouse()));
    }
}

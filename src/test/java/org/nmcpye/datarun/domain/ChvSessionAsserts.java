package org.nmcpye.datarun.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ChvSessionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChvSessionAllPropertiesEquals(ChvSession expected, ChvSession actual) {
        assertChvSessionAutoGeneratedPropertiesEquals(expected, actual);
        assertChvSessionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChvSessionAllUpdatablePropertiesEquals(ChvSession expected, ChvSession actual) {
        assertChvSessionUpdatableFieldsEquals(expected, actual);
        assertChvSessionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChvSessionAutoGeneratedPropertiesEquals(ChvSession expected, ChvSession actual) {
        assertThat(expected)
            .as("Verify ChvSession auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChvSessionUpdatableFieldsEquals(ChvSession expected, ChvSession actual) {
        assertThat(expected)
            .as("Verify ChvSession relevant properties")
            .satisfies(e -> assertThat(e.getUid()).as("check uid").isEqualTo(actual.getUid()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getSessionDate()).as("check sessionDate").isEqualTo(actual.getSessionDate()))
            .satisfies(e -> assertThat(e.getSubject()).as("check subject").isEqualTo(actual.getSubject()))
            .satisfies(e -> assertThat(e.getSessions()).as("check sessions").isEqualTo(actual.getSessions()))
            .satisfies(e -> assertThat(e.getPeople()).as("check people").isEqualTo(actual.getPeople()))
            .satisfies(e -> assertThat(e.getComment()).as("check comment").isEqualTo(actual.getComment()))
            .satisfies(e -> assertThat(e.getDeleted()).as("check deleted").isEqualTo(actual.getDeleted()))
            .satisfies(e -> assertThat(e.getStartEntryTime()).as("check startEntryTime").isEqualTo(actual.getStartEntryTime()))
            .satisfies(e -> assertThat(e.getFinishedEntryTime()).as("check finishedEntryTime").isEqualTo(actual.getFinishedEntryTime()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChvSessionUpdatableRelationshipsEquals(ChvSession expected, ChvSession actual) {
        assertThat(expected)
            .as("Verify ChvSession relationships")
            .satisfies(e -> assertThat(e.getTeam()).as("check team").isEqualTo(actual.getTeam()))
            .satisfies(e -> assertThat(e.getActivity()).as("check activity").isEqualTo(actual.getActivity()));
    }
}

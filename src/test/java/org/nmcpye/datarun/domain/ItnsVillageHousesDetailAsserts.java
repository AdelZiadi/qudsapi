package org.nmcpye.datarun.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ItnsVillageHousesDetailAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItnsVillageHousesDetailAllPropertiesEquals(ItnsVillageHousesDetail expected, ItnsVillageHousesDetail actual) {
        assertItnsVillageHousesDetailAutoGeneratedPropertiesEquals(expected, actual);
        assertItnsVillageHousesDetailAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItnsVillageHousesDetailAllUpdatablePropertiesEquals(
        ItnsVillageHousesDetail expected,
        ItnsVillageHousesDetail actual
    ) {
        assertItnsVillageHousesDetailUpdatableFieldsEquals(expected, actual);
        assertItnsVillageHousesDetailUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItnsVillageHousesDetailAutoGeneratedPropertiesEquals(
        ItnsVillageHousesDetail expected,
        ItnsVillageHousesDetail actual
    ) {
        assertThat(expected)
            .as("Verify ItnsVillageHousesDetail auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItnsVillageHousesDetailUpdatableFieldsEquals(
        ItnsVillageHousesDetail expected,
        ItnsVillageHousesDetail actual
    ) {
        assertThat(expected)
            .as("Verify ItnsVillageHousesDetail relevant properties")
            .satisfies(e -> assertThat(e.getUid()).as("check uid").isEqualTo(actual.getUid()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getCouponId()).as("check couponId").isEqualTo(actual.getCouponId()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getMale()).as("check male").isEqualTo(actual.getMale()))
            .satisfies(e -> assertThat(e.getFemale()).as("check female").isEqualTo(actual.getFemale()))
            .satisfies(e -> assertThat(e.getPregnant()).as("check pregnant").isEqualTo(actual.getPregnant()))
            .satisfies(e -> assertThat(e.getPopulation()).as("check population").isEqualTo(actual.getPopulation()))
            .satisfies(e -> assertThat(e.getMaleChild()).as("check maleChild").isEqualTo(actual.getMaleChild()))
            .satisfies(e -> assertThat(e.getFemaleChild()).as("check femaleChild").isEqualTo(actual.getFemaleChild()))
            .satisfies(e -> assertThat(e.getDisplaced()).as("check displaced").isEqualTo(actual.getDisplaced()))
            .satisfies(e -> assertThat(e.getItns()).as("check itns").isEqualTo(actual.getItns()))
            .satisfies(e -> assertThat(e.getComment()).as("check comment").isEqualTo(actual.getComment()))
            .satisfies(e -> assertThat(e.getSubmissionUuid()).as("check submissionUuid").isEqualTo(actual.getSubmissionUuid()))
            .satisfies(e -> assertThat(e.getHouseUuid()).as("check houseUuid").isEqualTo(actual.getHouseUuid()))
            .satisfies(e -> assertThat(e.getDeleted()).as("check deleted").isEqualTo(actual.getDeleted()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItnsVillageHousesDetailUpdatableRelationshipsEquals(
        ItnsVillageHousesDetail expected,
        ItnsVillageHousesDetail actual
    ) {
        assertThat(expected)
            .as("Verify ItnsVillageHousesDetail relationships")
            .satisfies(e -> assertThat(e.getItnsVillage()).as("check itnsVillage").isEqualTo(actual.getItnsVillage()));
    }
}

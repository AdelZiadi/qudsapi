package org.nmcpye.datarun.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ItnsVillageAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItnsVillageAllPropertiesEquals(ItnsVillage expected, ItnsVillage actual) {
        assertItnsVillageAutoGeneratedPropertiesEquals(expected, actual);
        assertItnsVillageAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItnsVillageAllUpdatablePropertiesEquals(ItnsVillage expected, ItnsVillage actual) {
        assertItnsVillageUpdatableFieldsEquals(expected, actual);
        assertItnsVillageUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItnsVillageAutoGeneratedPropertiesEquals(ItnsVillage expected, ItnsVillage actual) {
        assertThat(expected)
            .as("Verify ItnsVillage auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItnsVillageUpdatableFieldsEquals(ItnsVillage expected, ItnsVillage actual) {
        assertThat(expected)
            .as("Verify ItnsVillage relevant properties")
            .satisfies(e -> assertThat(e.getUid()).as("check uid").isEqualTo(actual.getUid()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getSubmissionUuid()).as("check submissionUuid").isEqualTo(actual.getSubmissionUuid()))
            .satisfies(e -> assertThat(e.getSubmissionId()).as("check submissionId").isEqualTo(actual.getSubmissionId()))
            .satisfies(e -> assertThat(e.getWorkDayDate()).as("check workDayDate").isEqualTo(actual.getWorkDayDate()))
            .satisfies(e -> assertThat(e.getSurveytype()).as("check surveytype").isEqualTo(actual.getSurveytype()))
            .satisfies(e -> assertThat(e.getOtherReasonComment()).as("check otherReasonComment").isEqualTo(actual.getOtherReasonComment()))
            .satisfies(e -> assertThat(e.getReasonNotcomplete()).as("check reasonNotcomplete").isEqualTo(actual.getReasonNotcomplete()))
            .satisfies(e -> assertThat(e.getSettlement()).as("check settlement").isEqualTo(actual.getSettlement()))
            .satisfies(e -> assertThat(e.getSettlementName()).as("check settlementName").isEqualTo(actual.getSettlementName()))
            .satisfies(e -> assertThat(e.getTlCommenet()).as("check tlCommenet").isEqualTo(actual.getTlCommenet()))
            .satisfies(e -> assertThat(e.getTimeSpentHours()).as("check timeSpentHours").isEqualTo(actual.getTimeSpentHours()))
            .satisfies(e -> assertThat(e.getTimeSpentMinutes()).as("check timeSpentMinutes").isEqualTo(actual.getTimeSpentMinutes()))
            .satisfies(e -> assertThat(e.getDifficulties()).as("check difficulties").isEqualTo(actual.getDifficulties()))
            .satisfies(e -> assertThat(e.getLocationCaptured()).as("check locationCaptured").isEqualTo(actual.getLocationCaptured()))
            .satisfies(
                e -> assertThat(e.getLocationCaptureTime()).as("check locationCaptureTime").isEqualTo(actual.getLocationCaptureTime())
            )
            .satisfies(e -> assertThat(e.getHoProof()).as("check hoProof").isEqualTo(actual.getHoProof()))
            .satisfies(e -> assertThat(e.getStartEntryTime()).as("check startEntryTime").isEqualTo(actual.getStartEntryTime()))
            .satisfies(e -> assertThat(e.getEndEntryTime()).as("check endEntryTime").isEqualTo(actual.getEndEntryTime()))
            .satisfies(e -> assertThat(e.getFinishedEntryTime()).as("check finishedEntryTime").isEqualTo(actual.getFinishedEntryTime()))
            .satisfies(e -> assertThat(e.getHoProofUrl()).as("check hoProofUrl").isEqualTo(actual.getHoProofUrl()))
            .satisfies(e -> assertThat(e.getSubmissionTime()).as("check submissionTime").isEqualTo(actual.getSubmissionTime()))
            .satisfies(
                e ->
                    assertThat(e.getUntargetingOtherSpecify())
                        .as("check untargetingOtherSpecify")
                        .isEqualTo(actual.getUntargetingOtherSpecify())
            )
            .satisfies(e -> assertThat(e.getOtherVillageName()).as("check otherVillageName").isEqualTo(actual.getOtherVillageName()))
            .satisfies(e -> assertThat(e.getOtherVillageCode()).as("check otherVillageCode").isEqualTo(actual.getOtherVillageCode()))
            .satisfies(e -> assertThat(e.getOtherTeamNo()).as("check otherTeamNo").isEqualTo(actual.getOtherTeamNo()))
            .satisfies(e -> assertThat(e.getDeleted()).as("check deleted").isEqualTo(actual.getDeleted()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertItnsVillageUpdatableRelationshipsEquals(ItnsVillage expected, ItnsVillage actual) {
        assertThat(expected)
            .as("Verify ItnsVillage relationships")
            .satisfies(e -> assertThat(e.getProgressStatus()).as("check progressStatus").isEqualTo(actual.getProgressStatus()))
            .satisfies(e -> assertThat(e.getTeam()).as("check team").isEqualTo(actual.getTeam()))
            .satisfies(e -> assertThat(e.getAssignment()).as("check assignment").isEqualTo(actual.getAssignment()))
            .satisfies(e -> assertThat(e.getActivity()).as("check activity").isEqualTo(actual.getActivity()));
    }
}

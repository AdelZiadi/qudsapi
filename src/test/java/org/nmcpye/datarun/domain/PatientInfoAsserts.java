package org.nmcpye.datarun.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PatientInfoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientInfoAllPropertiesEquals(PatientInfo expected, PatientInfo actual) {
        assertPatientInfoAutoGeneratedPropertiesEquals(expected, actual);
        assertPatientInfoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientInfoAllUpdatablePropertiesEquals(PatientInfo expected, PatientInfo actual) {
        assertPatientInfoUpdatableFieldsEquals(expected, actual);
        assertPatientInfoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientInfoAutoGeneratedPropertiesEquals(PatientInfo expected, PatientInfo actual) {
        assertThat(expected)
            .as("Verify PatientInfo auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientInfoUpdatableFieldsEquals(PatientInfo expected, PatientInfo actual) {
        assertThat(expected)
            .as("Verify PatientInfo relevant properties")
            .satisfies(e -> assertThat(e.getUid()).as("check uid").isEqualTo(actual.getUid()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getAge()).as("check age").isEqualTo(actual.getAge()))
            .satisfies(e -> assertThat(e.getGender()).as("check gender").isEqualTo(actual.getGender()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientInfoUpdatableRelationshipsEquals(PatientInfo expected, PatientInfo actual) {
        assertThat(expected)
            .as("Verify PatientInfo relationships")
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()));
    }
}

package org.nmcpye.datarun.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class WarehouseTransactionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWarehouseTransactionAllPropertiesEquals(WarehouseTransaction expected, WarehouseTransaction actual) {
        assertWarehouseTransactionAutoGeneratedPropertiesEquals(expected, actual);
        assertWarehouseTransactionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWarehouseTransactionAllUpdatablePropertiesEquals(WarehouseTransaction expected, WarehouseTransaction actual) {
        assertWarehouseTransactionUpdatableFieldsEquals(expected, actual);
        assertWarehouseTransactionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWarehouseTransactionAutoGeneratedPropertiesEquals(WarehouseTransaction expected, WarehouseTransaction actual) {
        assertThat(expected)
            .as("Verify WarehouseTransaction auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWarehouseTransactionUpdatableFieldsEquals(WarehouseTransaction expected, WarehouseTransaction actual) {
        assertThat(expected)
            .as("Verify WarehouseTransaction relevant properties")
            .satisfies(e -> assertThat(e.getUid()).as("check uid").isEqualTo(actual.getUid()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getImovUid()).as("check imovUid").isEqualTo(actual.getImovUid()))
            .satisfies(e -> assertThat(e.getTransactionDate()).as("check transactionDate").isEqualTo(actual.getTransactionDate()))
            .satisfies(e -> assertThat(e.getPhaseNo()).as("check phaseNo").isEqualTo(actual.getPhaseNo()))
            .satisfies(e -> assertThat(e.getEntryType()).as("check entryType").isEqualTo(actual.getEntryType()))
            .satisfies(e -> assertThat(e.getQuantity()).as("check quantity").isEqualTo(actual.getQuantity()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()))
            .satisfies(e -> assertThat(e.getPersonName()).as("check personName").isEqualTo(actual.getPersonName()))
            .satisfies(e -> assertThat(e.getWorkDayId()).as("check workDayId").isEqualTo(actual.getWorkDayId()))
            .satisfies(e -> assertThat(e.getSubmissionTime()).as("check submissionTime").isEqualTo(actual.getSubmissionTime()))
            .satisfies(e -> assertThat(e.getSubmissionId()).as("check submissionId").isEqualTo(actual.getSubmissionId()))
            .satisfies(e -> assertThat(e.getDeleted()).as("check deleted").isEqualTo(actual.getDeleted()))
            .satisfies(e -> assertThat(e.getSubmissionUuid()).as("check submissionUuid").isEqualTo(actual.getSubmissionUuid()))
            .satisfies(e -> assertThat(e.getStartEntryTime()).as("check startEntryTime").isEqualTo(actual.getStartEntryTime()))
            .satisfies(e -> assertThat(e.getFinishedEntryTime()).as("check finishedEntryTime").isEqualTo(actual.getFinishedEntryTime()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWarehouseTransactionUpdatableRelationshipsEquals(WarehouseTransaction expected, WarehouseTransaction actual) {
        assertThat(expected)
            .as("Verify WarehouseTransaction relationships")
            .satisfies(e -> assertThat(e.getItem()).as("check item").isEqualTo(actual.getItem()))
            .satisfies(e -> assertThat(e.getSourceWarehouse()).as("check sourceWarehouse").isEqualTo(actual.getSourceWarehouse()))
            .satisfies(e -> assertThat(e.getTeam()).as("check team").isEqualTo(actual.getTeam()))
            .satisfies(e -> assertThat(e.getWarehouse()).as("check warehouse").isEqualTo(actual.getWarehouse()))
            .satisfies(e -> assertThat(e.getActivity()).as("check activity").isEqualTo(actual.getActivity()));
    }
}
